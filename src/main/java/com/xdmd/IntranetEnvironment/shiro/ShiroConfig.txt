package com.xdmd.IntranetEnvironment.shiro;

import org.apache.shiro.mgt.SecurityManager;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.LinkedHashMap;
import java.util.Map;

@Configuration
public class ShiroConfig {
    /**
     * 过滤器默认权限表 {anon=anon, authc=authc, authcBasic=authcBasic, logout=logout,
     * noSessionCreation=noSessionCreation, perms=perms, port=port,
     * rest=rest, roles=roles, ssl=ssl, User=User}
     * <p>
     * anon, authc, authcBasic, User 是第一组认证过滤器
     * perms, port, rest, roles, ssl 是第二组授权过滤器
     * <p>
     * User 和 authc 的不同：当应用开启了rememberMe时, 用户下次访问时可以是一个user, 但绝不会是authc,
     * 因为authc是需要重新认证的, user表示用户不一定已通过认证, 只要曾被Shiro记住过登录状态的用户就可以正常发起请求,比如rememberMe
     * 以前的一个用户登录时开启了rememberMe, 然后他关闭浏览器, 下次再访问时他就是一个user, 而不会authc
     *
     * @param securityManager 初始化 ShiroFilterFactoryBean 的时候需要注入 SecurityManager
     */
    @Bean
    public ShiroFilterFactoryBean shirFilter(SecurityManager securityManager) {
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        // 必须设置 SecurityManager
        shiroFilterFactoryBean.setSecurityManager(securityManager);
        // setLoginUrl 如果不设置值，默认会自动寻找Web工程根目录下的"/login.jsp"页面 或 "/login" 映射
        shiroFilterFactoryBean.setLoginUrl("/error/notLogin");
        // 设置无权限时跳转的 url;
        shiroFilterFactoryBean.setUnauthorizedUrl("/error/notPermission");

        // 设置拦截器
        Map<String, String> filterChainDefinitionMap = new LinkedHashMap<String,String>();

        //***********************外网  张玉得龙 接口权限***************************************//
        filterChainDefinitionMap.put("/error/**","anon");

        //开放公司的登陆 注册接口 游客权限
        filterChainDefinitionMap.put("/company/register","anon");
        filterChainDefinitionMap.put("/company/login","anon");

        //开放文件的下载 游客权限
        filterChainDefinitionMap.put("/file/queryFileStream","anon");

        //开放专家的登陆 注册接口 游客权限
        filterChainDefinitionMap.put("/expert/register","anon");
        filterChainDefinitionMap.put("/extranetExpert/login","anon");

        //开放验证码接口
        filterChainDefinitionMap.put("/code/checkCode","anon");

        //设置后台管理中修改自己密码的权限
        filterChainDefinitionMap.put("/backstageManager/changePassword","roles[backstageManagerChangePassword]");
        //设置后台管理中 给企业新增子账号的权限
        filterChainDefinitionMap.put("/backstageManager/addSubaccount","roles[backstageManagerAddSubaccount]");
        //对员工信息进行修改
        filterChainDefinitionMap.put("/backstageManager/modifyStaff","roles[backstageManagerModifyStaff]");
        //查询本单位的所有账号
        filterChainDefinitionMap.put("/backstageManager/queryStaff","roles[backstageManagerQueryStaff]");
        //改变账号状态 启用或停用
        filterChainDefinitionMap.put("/backstageManager/changeState","roles[backstageManagerChangeState]");

        //设置验收申请中 申请验收的填写
        filterChainDefinitionMap.put("/apply/addAcceptApply","roles[applyAddAcceptApply]");
        //设置验收申请中，验收审核查询
        filterChainDefinitionMap.put("/apply/checkApplyStateQuery","roles[applyCheckApplyStateQuery]");
        //设置验收申请中， 审核
        filterChainDefinitionMap.put("/apply/examine","roles[applyExamine]");
        //设置验收申请中， 最终查询
        filterChainDefinitionMap.put("/apply/queryResult","roles[applyQueryResult]");
        //设置验收申请中，提交最终报告
        filterChainDefinitionMap.put("/apply/submitLastReport","roles[applySubmitLastReport]");
        //设置验收申请中，上传专家组文件
        filterChainDefinitionMap.put("/apply/submitExpertGroup","roles[applySubmitExpertGroup]");
        //在验收提交申请后，审核之前进行修改
        filterChainDefinitionMap.put("/apply/modify","roles[applyModify]");
        //对专家组信息，专家组，专家组评议表文件进行修改上传
        filterChainDefinitionMap.put("/apply/ExpertGroupModify","roles[applyExpertGroupModify]");
        //对最终验收证书与信息 修改
        filterChainDefinitionMap.put("/apply/lastReportModify","roles[applyLastReportModify]");
        //外网在做课题申请时，先查询可添加的课题名称
        filterChainDefinitionMap.put("/apply/queryTopicName","roles[applyQueryTopicName]");
        //通过课题名称，获取课题编号
        filterChainDefinitionMap.put("/apply/queryTopicNumber","roles[applyQueryTopicNumber]");
        //验收申请中，根据课题编号获取信息
        filterChainDefinitionMap.put("/apply/queryInformationByTopicNumber","roles[applyQueryInformationByTopicNumber]");
        //外网通知公告的查询
        filterChainDefinitionMap.put("/notification/ExtranetQuery","roles[notificationExtranetQuery]");


        //************************内网  张玉得龙  接口权限 ******************************************//
        //成果库中的成果查询
        filterChainDefinitionMap.put("/achievement/queryAchievement","roles[achievementQueryAchievement]");
        //成果新增时查询
        filterChainDefinitionMap.put("/achievement/addAchievementQuery","roles[achievementAddAchievementQuery]");
        //成果新增的提交
        filterChainDefinitionMap.put("/achievement/AddAchievement","roles[achievementAddAchievement]");
        //成果新增时，查询验收申请的所有信息
        filterChainDefinitionMap.put("/achievement/queryAllCheckApply","roles[achievementQueryAllCheckApply]");
        //内网专家分配账号
        filterChainDefinitionMap.put("/expert/distributionExpertAccount","roles[expertDistributionExpertAccount]");
        //专家的查询
        filterChainDefinitionMap.put("/expert/query","roles[expertQuery]");
        //专家账号的审核
        filterChainDefinitionMap.put("/expert/examine","roles[expertExamine]");
        //专家表的修改
        filterChainDefinitionMap.put("/expert/modify","roles[expertModify]");
        //专家账号的审核与停用
        filterChainDefinitionMap.put("/expert/changeState","roles[expertChangeState]");
        //显示省内 省外专家
        filterChainDefinitionMap.put("/expertStyle/province","anon");
        //显示工作性质
        filterChainDefinitionMap.put("/expertStyle/natureWork","anon");
        //显示专业领域
        filterChainDefinitionMap.put("/expertStyle/professionalField","anon");
        //查询企业提交的验收申请
        filterChainDefinitionMap.put("/checkApply/query","roles[checkApplyQuery]");
        //课题验收的查询
        filterChainDefinitionMap.put("/subjectAccept/query","roles[subjectAcceptQuery]");
        //课题验收的审核
        filterChainDefinitionMap.put("/subjectAccept/examine","roles[subjectAcceptExamine]");
        //验收申请的查询
        filterChainDefinitionMap.put("/acceptState/query","roles[acceptStateQuery]");
        //验收申请的审核
        filterChainDefinitionMap.put("/acceptState/examine","roles[acceptStateExamine]");
        //验收结束的查询
        filterChainDefinitionMap.put("/AcceptEnd/query","roles[AcceptEndQuery]");
        //验收结束的审核
        filterChainDefinitionMap.put("/AcceptEnd/examine","roles[AcceptEndExamine]");
        //课题验收中的单位性质  (内外网都有)
        filterChainDefinitionMap.put("/checkApplyStyle/unitNature","anon");
        //课题验收中的申请验收方式  （内外网都有）
        filterChainDefinitionMap.put("/checkApplyStyle/applicationAcceptance","anon");
        //课题验收中的验收提交资料清单  (内外网都有)
        filterChainDefinitionMap.put("/checkApplyStyle/applicationSubmitList","anon");
        //通知公告的新增
        filterChainDefinitionMap.put("/notification/add","roles[notificationAdd]");
        //通知公告的删除
        filterChainDefinitionMap.put("/notification/delete","roles[notificationDelete]");
        //通知公告的修改
        filterChainDefinitionMap.put("/notification/update","roles[notificationUpdate]");
        //通知公告的查询
        filterChainDefinitionMap.put("/notification/query","roles[notificationQuery]");
        //内网菜单的查询
        filterChainDefinitionMap.put("/menu/query","anon");
        //内网用户的登陆
        filterChainDefinitionMap.put("/user/login","anon");




//
//        //登陆接口 游客，开放权限
//        filterChainDefinitionMap.put("/Login/user","anon");
//
//        filterChainDefinitionMap.put("/User/queryUser","roles[edit]");
//
//        filterChainDefinitionMap.put("/code/checkCode","anon");
//
//        filterChainDefinitionMap.put("/company/**","anon");
//
//        filterChainDefinitionMap.put("/AcceptApply/unitNature","roles[unitNature]");
//
//        filterChainDefinitionMap.put("/company/login","anon");


//        //游客，开发权限
//        filterChainDefinitionMap.put("/category/**", "roles[dataDelete]");
//
//        //游客，开发权限
//        filterChainDefinitionMap.put("/code/checkCode", "anon");
//
//        //游客，开发权限
//        filterChainDefinitionMap.put("/guest/**", "anon");
//        //用户，需要角色权限 “User”
//        //filterChainDefinitionMap.put("/company/**", "roles[User]");
//        //管理员，需要角色权限 “admin”
//        filterChainDefinitionMap.put("/admin/**", "roles[admin]");
//        //开放登陆接口
//        filterChainDefinitionMap.put("/company/login", "anon");
        //其余接口一律拦截
        //主要这行代码必须放在所有权限设置的最后，不然会导致所有 url 都被拦截
        //filterChainDefinitionMap.put("/**", "authc");
        filterChainDefinitionMap.put("/**", "authc");

        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);
        System.out.println("Shiro拦截器工厂类注入成功");
        return shiroFilterFactoryBean;
    }

    /**
     * 注入 securityManager
     */
    @Bean
    public SecurityManager securityManager(CustomRealm customRealm) {
        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();
        // 设置realm.
        securityManager.setRealm(customRealm);
        return securityManager;
    }

}